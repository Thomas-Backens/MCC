(() => {
var exports = {};
exports.id = "pages/api/hymn";
exports.ids = ["pages/api/hymn"];
exports.modules = {

/***/ "./src/Utils/mongodb.js":
/*!******************************!*\
  !*** ./src/Utils/mongodb.js ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const {
  MongoClient
} = __webpack_require__(/*! mongodb */ "mongodb");

const uri = "mongodb+srv://mongomastercluster:Homeschool20035@cluster0.yp2ivel.mongodb.net/?retryWrites=true&w=majority";

const setLogs = async (hymnId, newLogs) => {
  const client = new MongoClient(uri);

  try {
    await client.connect();
    const setLog = await client.db("AllHymns").collection("Hymns").updateOne({
      _id: hymnId
    }, {
      $set: {
        logs: newLogs
      }
    });
    console.log(setLog);
  } catch (e) {
    console.error(e);
  } finally {
    await client.close();
  }
}; // setLogs(17, [{ logged: "11/08/22", by: "Thomas Backens" }]).catch(
//   console.error
// );


const getAllHymns = async () => {
  const client = new MongoClient(uri);
  let result = {};

  try {
    await client.connect();
    const list = client.db("AllHymns").collection("Hymns").find({
      _id: {
        $gte: 0
      }
    });
    result = await list.toArray();
  } catch (e) {
    console.error(e);
  } finally {
    await client.close();
  }

  return result;
};

const addHymn = async newHymn => {
  const client = new MongoClient(uri);
  let result = {};

  try {
    await client.connect();
    const insertedHymn = client.db("AllHymns").collection("Hymns").insertOne(newHymn);
    result = await insertedHymn;

    if (result.insertedId) {
      result = [{
        number: newHymn._id,
        name: newHymn.name,
        logs: newHymn.logs
      }];
    }
  } catch (e) {
    console.error(e);
  } finally {
    await client.close();
  }

  return result;
}; // addHymn({
//   _id: 489,
//   name: "Glory to His Name",
//   logs: [{ logged: "02/17/21", by: "Thomas Backens" }],
// }).catch(console.error);


const editHymn = async (hymnId, newId, newName) => {
  const client = new MongoClient(uri);
  let result = {};

  try {
    await client.connect();
    console.log(hymnId, newId, newName);
    const oldHymn = await client.db("AllHymns").collection("Hymns").findOne({
      _id: hymnId
    });
    console.log(oldHymn);
    oldHymn._id = newId;
    oldHymn.name = newName;
    client.db("AllHymns").collection("Hymns").insertOne(oldHymn);
    await client.db("AllHymns").collection("Hymns").deleteOne({
      _id: hymnId
    });
    const newHymns = getAllHymns().catch(console.error);
    result = await newHymns;
  } catch (e) {
    console.error(e);
  } finally {
    await client.close();
  }

  return result;
};

const addLog = async (hymnId, newLog) => {
  const client = new MongoClient(uri);
  let result = {};

  try {
    await client.connect();
    const hymn = await client.db("AllHymns").collection("Hymns").findOne({
      _id: hymnId
    });
    let newLogs = await hymn.logs;

    for (let i = 0; i < newLogs.length; i++) {
      if (newLogs[i].logged === newLog.logs[0].logged) {
        return;
      }
    }

    newLogs.push(newLog.logs[0]);
    const insertedLog = await client.db("AllHymns").collection("Hymns").updateOne({
      _id: hymnId
    }, {
      $set: {
        logs: newLogs
      }
    });
    result = insertedLog;

    if (result.modifiedCount >= 1) {
      const newHymns = getAllHymns().catch(console.error);
      result = await newHymns;
    }
  } catch (e) {
    console.error(e);
  } finally {
    await client.close();
  }

  return result;
}; // addLog(17, { logs: [{ logged: "11/08/22", by: "kevin" }] }).catch(
//   console.error
// );


module.exports = {
  getAllHymns,
  addHymn,
  editHymn,
  addLog
};

/***/ }),

/***/ "./src/pages/api/hymn.js":
/*!*******************************!*\
  !*** ./src/pages/api/hymn.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* eslint-disable import/no-anonymous-default-export */
const mongoQuery = __webpack_require__(/*! ../../Utils/mongodb */ "./src/Utils/mongodb.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (async (req, res) => {
  switch (req.method) {
    case "GET":
      try {
        const hymns = await mongoQuery.getAllHymns();
        res.status(200).json({
          hymns
        });
        break;
      } catch (err) {
        return res.status(500).json({
          message: err.message
        });
      }

    case "POST":
      try {
        const {
          name,
          number,
          log
        } = await req.body;

        if (name && number) {
          if (log.by) {
            const result = await mongoQuery.addHymn({
              _id: number,
              name: name,
              logs: [{
                logged: log.logged,
                by: log.by
              }]
            });
            console.log(result);
            return res.json(result[0]);
          } else {
            const result = await mongoQuery.addHymn({
              _id: number,
              name: name,
              logs: [{
                logged: log.logged,
                by: "Anonymous"
              }]
            });
            return res.json(result[0]);
          }
        }

        throw new Error("number required");
      } catch (err) {
        return res.status(500).json({
          message: err.message
        });
      }

    case "PUT":
      try {
        const {
          _id,
          logged,
          by
        } = await req.body;

        if (_id && logged) {
          if (by) {
            const result = await mongoQuery.addLog(_id, {
              logs: [{
                logged: logged,
                by: by
              }]
            });

            if (result === undefined) {
              return res.json([]);
            }

            return res.json(result);
          } else {
            const result = await mongoQuery.addLog(_id, {
              logs: [{
                logged: logged,
                by: "Anonymous"
              }]
            });

            if (result === undefined) {
              return res.json([]);
            }

            return res.json(result);
          }
        }

        throw new Error("log required");
      } catch (err) {
        return res.status(500).json({
          message: err.message
        });
      }

    case "PATCH":
      try {
        const {
          _id,
          newId,
          newName
        } = await req.body;

        if (_id) {
          const result = await mongoQuery.editHymn(_id, newId, newName);
          return res.json(result);
        }

        throw new Error("Id required");
      } catch (err) {
        return res.status(500).json({
          message: err.message
        });
      }

    default:
      return res.status(405).send("Method Not Allowed");
  }
});

/***/ }),

/***/ "mongodb":
/*!**************************!*\
  !*** external "mongodb" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("mongodb");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./src/pages/api/hymn.js"));
module.exports = __webpack_exports__;

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,